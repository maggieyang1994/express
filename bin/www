#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('yirenzhixia:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

 // 这里port不能写死   heroku会随机分配一个端口  然后映射到heroku的80端口
var port = process.env.PORT || 5000;
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port, () => console.log(`Listening on ${ port }`));
server.on('error', onError);
server.on('listening', onListening);

// 开启一个socket服务
var io = require("socket.io")(server);
var users = []

io.on("connection", function(socket){
  socket.on("login", function(data){
    !users.find(x => x.name === data.name) && users.push(data);
    // 给所有链接的client 发送消息
    io.sockets.emit("someone login", {users, currentUser: data})

    // socket.broadcast.emit 通知除了触发回掉 的client
    // socket.emit 通知触发回掉的client
  })

  socket.on("loginout", function(data){
    users.splice(users.findIndex(x => x.name === data.name), 1);
    // 告诉所有人有人离线了
    io.sockets.emit("someone loginout", {users, currentUser:data})
  })

  // 接收消息
  socket.on("sendMessage", function(data){
    socket.broadcast.emit("message", data)
  })
})

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
